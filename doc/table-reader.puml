@startuml table
start
:创建索引迭代器 iiter = rep_->index_block->NewIterator(comparator);
:调用 iiter->Seek(k) 定位索引;
if (iiter->Valid?) then (是)
    :读取索引条目 handle_value = iiter->value();
    if (filter 存在 && !KeyMayMatch(handle.offset(), k)) then (否)
        :键不存在，返回;
        stop
    else (是)
        :解析索引条目为 BlockHandle handle;
        if (block_cache 存在) then (是)
            :生成缓存键 cache_key;
            :在 block_cache 中查找缓存的块 cache_handle;
            if (cache_handle 存在) then (是)
                :从缓存中加载块 block;
            else (否)
                :从文件中读取块并解码;
                if (块可缓存 && options.fill_cache) then (是)
                    :将块插入 block_cache;
                endif
            endif
        else (否)
            :从文件中读取块并解码;
        endif

        :创建数据块迭代器 block_iter = block->NewIterator(comparator);
        :调用 block_iter->Seek(k) 定位键;
        if (block_iter->Valid?) then (是)
            :调用 handle_result(arg, block_iter->key(), block_iter->value());
        endif
        if (cache_handle 存在) then (是)
            :注册释放缓存的清理函数;
        else (否)
            :注册删除块的清理函数;
        endif
        :删除 block_iter;
    endif
else (否)
    :键不存在，返回;
endif
:删除 iiter;
stop
@enduml
